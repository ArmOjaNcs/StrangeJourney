//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""e76186b7-49b2-4257-afa8-8b4451720541"",
            ""actions"": [
                {
                    ""name"": ""UfoMovement"",
                    ""type"": ""Value"",
                    ""id"": ""7fd7e03f-6d63-4fc9-a65d-b24d974f74be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""52c3788d-315f-4d2f-ad46-a72b0123c0b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SphereRotateByClockWise"",
                    ""type"": ""Button"",
                    ""id"": ""bd702986-5a5c-42ba-bf7d-f6f6f6546d34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UfoAddForce"",
                    ""type"": ""Button"",
                    ""id"": ""a51eaa97-631f-452d-bc8a-a89bcf9928ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UfoAddGravity"",
                    ""type"": ""Button"",
                    ""id"": ""d620fd0f-8912-4d7a-8429-f5266e463669"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SphereRotateCounterClockWise"",
                    ""type"": ""Button"",
                    ""id"": ""faec6d6e-f59e-4a01-868b-88b08f914fbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""672c76bc-9155-48b3-bfea-8b00434ad494"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UfoMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f64c372b-d5e5-4446-aa58-decfb2ac5ebb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UfoMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b7d371eb-e561-4acd-9cd2-e852dc86b631"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UfoMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f122ea65-610f-415c-8c3a-ea796f135102"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a15f42d1-fd53-49b6-8f9c-0744b54e7c96"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UfoAddGravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16aac5aa-384e-468c-a245-a1f967020c80"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SphereRotateCounterClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""948ba80f-bf87-4ec0-a65d-1dd028e2d83c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SphereRotateByClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebfe7a72-ea37-45a8-af27-1447caf0ec07"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UfoAddForce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UImenu"",
            ""id"": ""2f642da8-e1ab-4c3e-be19-0f1fb09a86fa"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""e6c6da17-dc23-4a4b-a28d-e97711d26619"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9466466a-d40f-40b2-949d-8440b1b3bd7f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Environment"",
            ""id"": ""663e8e17-60d5-49fa-92ba-f362906f0026"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""92460d23-a332-4794-823b-60868d8f7bed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e718d33c-38d6-4950-8ebc-63f5e9cb1492"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_UfoMovement = m_Gameplay.FindAction("UfoMovement", throwIfNotFound: true);
        m_Gameplay_Fire = m_Gameplay.FindAction("Fire", throwIfNotFound: true);
        m_Gameplay_SphereRotateByClockWise = m_Gameplay.FindAction("SphereRotateByClockWise", throwIfNotFound: true);
        m_Gameplay_UfoAddForce = m_Gameplay.FindAction("UfoAddForce", throwIfNotFound: true);
        m_Gameplay_UfoAddGravity = m_Gameplay.FindAction("UfoAddGravity", throwIfNotFound: true);
        m_Gameplay_SphereRotateCounterClockWise = m_Gameplay.FindAction("SphereRotateCounterClockWise", throwIfNotFound: true);
        // UImenu
        m_UImenu = asset.FindActionMap("UImenu", throwIfNotFound: true);
        m_UImenu_Newaction = m_UImenu.FindAction("New action", throwIfNotFound: true);
        // Environment
        m_Environment = asset.FindActionMap("Environment", throwIfNotFound: true);
        m_Environment_Newaction = m_Environment.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_UfoMovement;
    private readonly InputAction m_Gameplay_Fire;
    private readonly InputAction m_Gameplay_SphereRotateByClockWise;
    private readonly InputAction m_Gameplay_UfoAddForce;
    private readonly InputAction m_Gameplay_UfoAddGravity;
    private readonly InputAction m_Gameplay_SphereRotateCounterClockWise;
    public struct GameplayActions
    {
        private @InputSystem m_Wrapper;
        public GameplayActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @UfoMovement => m_Wrapper.m_Gameplay_UfoMovement;
        public InputAction @Fire => m_Wrapper.m_Gameplay_Fire;
        public InputAction @SphereRotateByClockWise => m_Wrapper.m_Gameplay_SphereRotateByClockWise;
        public InputAction @UfoAddForce => m_Wrapper.m_Gameplay_UfoAddForce;
        public InputAction @UfoAddGravity => m_Wrapper.m_Gameplay_UfoAddGravity;
        public InputAction @SphereRotateCounterClockWise => m_Wrapper.m_Gameplay_SphereRotateCounterClockWise;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @UfoMovement.started += instance.OnUfoMovement;
            @UfoMovement.performed += instance.OnUfoMovement;
            @UfoMovement.canceled += instance.OnUfoMovement;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @SphereRotateByClockWise.started += instance.OnSphereRotateByClockWise;
            @SphereRotateByClockWise.performed += instance.OnSphereRotateByClockWise;
            @SphereRotateByClockWise.canceled += instance.OnSphereRotateByClockWise;
            @UfoAddForce.started += instance.OnUfoAddForce;
            @UfoAddForce.performed += instance.OnUfoAddForce;
            @UfoAddForce.canceled += instance.OnUfoAddForce;
            @UfoAddGravity.started += instance.OnUfoAddGravity;
            @UfoAddGravity.performed += instance.OnUfoAddGravity;
            @UfoAddGravity.canceled += instance.OnUfoAddGravity;
            @SphereRotateCounterClockWise.started += instance.OnSphereRotateCounterClockWise;
            @SphereRotateCounterClockWise.performed += instance.OnSphereRotateCounterClockWise;
            @SphereRotateCounterClockWise.canceled += instance.OnSphereRotateCounterClockWise;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @UfoMovement.started -= instance.OnUfoMovement;
            @UfoMovement.performed -= instance.OnUfoMovement;
            @UfoMovement.canceled -= instance.OnUfoMovement;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @SphereRotateByClockWise.started -= instance.OnSphereRotateByClockWise;
            @SphereRotateByClockWise.performed -= instance.OnSphereRotateByClockWise;
            @SphereRotateByClockWise.canceled -= instance.OnSphereRotateByClockWise;
            @UfoAddForce.started -= instance.OnUfoAddForce;
            @UfoAddForce.performed -= instance.OnUfoAddForce;
            @UfoAddForce.canceled -= instance.OnUfoAddForce;
            @UfoAddGravity.started -= instance.OnUfoAddGravity;
            @UfoAddGravity.performed -= instance.OnUfoAddGravity;
            @UfoAddGravity.canceled -= instance.OnUfoAddGravity;
            @SphereRotateCounterClockWise.started -= instance.OnSphereRotateCounterClockWise;
            @SphereRotateCounterClockWise.performed -= instance.OnSphereRotateCounterClockWise;
            @SphereRotateCounterClockWise.canceled -= instance.OnSphereRotateCounterClockWise;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // UImenu
    private readonly InputActionMap m_UImenu;
    private List<IUImenuActions> m_UImenuActionsCallbackInterfaces = new List<IUImenuActions>();
    private readonly InputAction m_UImenu_Newaction;
    public struct UImenuActions
    {
        private @InputSystem m_Wrapper;
        public UImenuActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UImenu_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UImenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UImenuActions set) { return set.Get(); }
        public void AddCallbacks(IUImenuActions instance)
        {
            if (instance == null || m_Wrapper.m_UImenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UImenuActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUImenuActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUImenuActions instance)
        {
            if (m_Wrapper.m_UImenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUImenuActions instance)
        {
            foreach (var item in m_Wrapper.m_UImenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UImenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UImenuActions @UImenu => new UImenuActions(this);

    // Environment
    private readonly InputActionMap m_Environment;
    private List<IEnvironmentActions> m_EnvironmentActionsCallbackInterfaces = new List<IEnvironmentActions>();
    private readonly InputAction m_Environment_Newaction;
    public struct EnvironmentActions
    {
        private @InputSystem m_Wrapper;
        public EnvironmentActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Environment_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Environment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EnvironmentActions set) { return set.Get(); }
        public void AddCallbacks(IEnvironmentActions instance)
        {
            if (instance == null || m_Wrapper.m_EnvironmentActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EnvironmentActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IEnvironmentActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IEnvironmentActions instance)
        {
            if (m_Wrapper.m_EnvironmentActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEnvironmentActions instance)
        {
            foreach (var item in m_Wrapper.m_EnvironmentActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EnvironmentActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EnvironmentActions @Environment => new EnvironmentActions(this);
    public interface IGameplayActions
    {
        void OnUfoMovement(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSphereRotateByClockWise(InputAction.CallbackContext context);
        void OnUfoAddForce(InputAction.CallbackContext context);
        void OnUfoAddGravity(InputAction.CallbackContext context);
        void OnSphereRotateCounterClockWise(InputAction.CallbackContext context);
    }
    public interface IUImenuActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IEnvironmentActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
